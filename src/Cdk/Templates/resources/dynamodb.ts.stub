import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';

export interface DynamoTableProps {
  tableName: string;
  partitionKeyName: string;
  autoscaling?: boolean;
}

export class DynamoTableConstruct extends Construct {
  public readonly table: dynamodb.Table;

  constructor(scope: Construct, id: string, props: DynamoTableProps) {
    super(scope, id);

    this.table = new dynamodb.Table(this, id, {
      tableName: props.tableName,
      partitionKey: {
        name: props.partitionKeyName,
        type: dynamodb.AttributeType.STRING,
      },
      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
      removalPolicy: cdk.RemovalPolicy.RETAIN,
    });

    // Add autoscaling if needed
    // This would be implemented using the application auto scaling construct
    // if props.autoscaling is true
  }
}

export class CacheTableConstruct extends DynamoTableConstruct {
  constructor(scope: Construct, id: string, tableName: string, autoscaling?: boolean) {
    super(scope, id, {
      tableName: tableName,
      partitionKeyName: 'key',
      autoscaling: autoscaling,
    });
  }
}

export class SessionTableConstruct extends DynamoTableConstruct {
  constructor(scope: Construct, id: string, tableName: string, autoscaling?: boolean) {
    super(scope, id, {
      tableName: tableName,
      partitionKeyName: 'id',
      autoscaling: autoscaling,
    });
  }
}
