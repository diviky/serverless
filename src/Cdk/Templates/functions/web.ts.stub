import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as events from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import * as iam from 'aws-cdk-lib/aws-iam';

export interface WebFunctionProps {
  name: string;
  stage: string;
  runtime: string;
  memory: number;
  timeout: number;
  environment: Record<string, string>;
  role: iam.IRole;
  warmerEnabled?: boolean;
  warmerConcurrency?: number;
  stageName?: string;
}

export class WebFunctionConstruct extends Construct {
  public readonly function: lambda.Function;
  public readonly api: apigateway.LambdaRestApi;

  constructor(scope: Construct, id: string, props: WebFunctionProps) {
    super(scope, id);

    // Get runtime from string
    const runtime = this.getRuntimeFromString(props.runtime);

    // Create Web Function
    this.function = new lambda.Function(this, 'Function', {
      functionName: `${props.name}-${props.stage}-web`,
      runtime: runtime,
      memorySize: props.memory,
      timeout: cdk.Duration.seconds(props.timeout),
      handler: 'vaporHandler.handle',
      code: lambda.Code.fromAsset('app.zip'),
      role: props.role,
      environment: props.environment,
    });

    // Create API Gateway
    this.api = new apigateway.LambdaRestApi(this, 'Api', {
      handler: this.function,
      proxy: true,
      deployOptions: {
        stageName: props.stageName || props.stage,
      },
    });

    // Create CloudWatch Event Rule for warming if enabled
    if (props.warmerEnabled !== false) {
      const warmerRule = new events.Rule(this, 'WarmerRule', {
        schedule: events.Schedule.rate(cdk.Duration.minutes(5)),
      });

      warmerRule.addTarget(new targets.LambdaFunction(this.function, {
        event: events.RuleTargetInput.fromObject({
          vaporWarmer: true,
          concurrency: props.warmerConcurrency || 10,
          functionAlias: props.stage,
          functionName: this.function.functionArn,
        }),
      }));
    }
  }

  private getRuntimeFromString(runtime: string): lambda.Runtime {
    switch (runtime) {
      case 'php-8.2':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-8.1':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-8.0':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-7.4':
        return lambda.Runtime.PROVIDED_AL2;
      case 'docker':
      case 'docker-arm':
        return lambda.Runtime.FROM_IMAGE;
      default:
        return lambda.Runtime.PROVIDED_AL2;
    }
  }
}
