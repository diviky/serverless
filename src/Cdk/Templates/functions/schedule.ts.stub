import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as events from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import * as iam from 'aws-cdk-lib/aws-iam';

export interface ScheduleFunctionProps {
  name: string;
  stage: string;
  runtime: string;
  memory: number;
  timeout: number;
  environment: Record<string, string>;
  role: iam.IRole;
  scheduleExpression?: string;
  scheduleInput?: Record<string, any>;
}

export class ScheduleFunctionConstruct extends Construct {
  public readonly function: lambda.Function;

  constructor(scope: Construct, id: string, props: ScheduleFunctionProps) {
    super(scope, id);

    // Get runtime from string
    const runtime = this.getRuntimeFromString(props.runtime);

    // Add console environment variable
    const environment = {
      ...props.environment,
      APP_RUNNING_IN_CONSOLE: 'true',
    };

    // Create Schedule Function
    this.function = new lambda.Function(this, 'Function', {
      functionName: `${props.name}-${props.stage}-schedule`,
      runtime: runtime,
      memorySize: props.memory,
      timeout: cdk.Duration.seconds(props.timeout),
      handler: 'vaporHandler.handle',
      code: lambda.Code.fromAsset('app.zip'),
      role: props.role,
      environment: environment,
    });

    // Create CloudWatch Event Rule for schedule
    const scheduleRule = new events.Rule(this, 'ScheduleRule', {
      schedule: events.Schedule.expression(props.scheduleExpression || 'rate(1 minute)'),
    });

    scheduleRule.addTarget(new targets.LambdaFunction(this.function, {
      event: events.RuleTargetInput.fromObject(props.scheduleInput || {
        cli: 'schedule:run',
      }),
    }));
  }

  private getRuntimeFromString(runtime: string): lambda.Runtime {
    switch (runtime) {
      case 'php-8.2':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-8.1':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-8.0':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-7.4':
        return lambda.Runtime.PROVIDED_AL2;
      case 'docker':
      case 'docker-arm':
        return lambda.Runtime.FROM_IMAGE;
      default:
        return lambda.Runtime.PROVIDED_AL2;
    }
  }
}
