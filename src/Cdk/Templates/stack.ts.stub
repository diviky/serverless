import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as events from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as sqs from 'aws-cdk-lib/aws-sqs';
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';

export class {{stackName}} extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Define Lambda execution role with necessary permissions
    const lambdaExecutionRole = new iam.Role(this, 'LambdaExecutionRole', {
      assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),
      ],
    });

    // Add additional permissions
    lambdaExecutionRole.addToPolicy(
      new iam.PolicyStatement({
        actions: [
          'route53:*',
          's3:*',
          'ses:*',
          'sqs:*',
          'dynamodb:*',
          'apigateway:*',
          'kms:Decrypt',
          'cloudformation:*',
          'secretsmanager:GetSecretValue',
          'ssm:GetParameters',
          'ssm:GetParameter',
          'lambda:invokeFunction',
          'acm:ListCertificates',
          'cloudfront:UpdateDistribution',
        ],
        resources: ['*'],
      })
    );

    // Create Lambda function
    const webFunction = new lambda.Function(this, 'WebFunction', {
      functionName: '{{name}}-{{stage}}-web',
      runtime: this.getRuntimeFromString('{{runtime}}'),
      memorySize: parseInt('{{memory}}'),
      timeout: cdk.Duration.seconds(parseInt('{{timeout}}')),
      handler: 'vaporHandler.handle',
      code: lambda.Code.fromAsset('app.zip'),
      role: lambdaExecutionRole,
      environment: {{environment}},
    });

    // Create API Gateway
    const api = new apigateway.LambdaRestApi(this, 'WebApi', {
      handler: webFunction,
      proxy: true,
      deployOptions: {
        stageName: '{{stage}}',
      },
    });

    // Create CloudWatch Event Rule for warming
    const warmerRule = new events.Rule(this, 'WarmerRule', {
      schedule: events.Schedule.rate(cdk.Duration.minutes(5)),
    });

    warmerRule.addTarget(new targets.LambdaFunction(webFunction, {
      event: events.RuleTargetInput.fromObject({
        vaporWarmer: true,
        concurrency: 10,
        functionAlias: '{{stage}}',
        functionName: webFunction.functionArn,
      }),
    }));

    // Outputs
    new cdk.CfnOutput(this, 'ApiEndpoint', {
      value: api.url,
    });
  }

  private getRuntimeFromString(runtime: string): lambda.Runtime {
    switch (runtime) {
      case 'php-8.2':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-8.1':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-8.0':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-7.4':
        return lambda.Runtime.PROVIDED_AL2;
      default:
        return lambda.Runtime.PROVIDED_AL2;
    }
  }
}
