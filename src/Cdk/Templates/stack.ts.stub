import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as events from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as sqs from 'aws-cdk-lib/aws-sqs';
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';
import * as route53 from 'aws-cdk-lib/aws-route53';
import * as acm from 'aws-cdk-lib/aws-certificatemanager';
import * as route53Targets from 'aws-cdk-lib/aws-route53-targets';
import * as cloudfront from 'aws-cdk-lib/aws-cloudfront';
import * as origins from 'aws-cdk-lib/aws-cloudfront-origins';

export interface QueueConfig {
  enabled: boolean;
  names: string[];
  batchSize: number;
}

export interface DynamoDBConfig {
  cacheEnabled: boolean;
  cacheName: string;
  sessionEnabled: boolean;
  sessionName: string;
}

export interface AssetConfig {
  enabled: boolean;
  bucketName: string;
  prefix: string;
}

export interface DomainConfig {
  enabled: boolean;
  name: string;
  certificateArn?: string;
  hostedZoneId?: string;
  hostedZoneName?: string;
}

export class {{stackName}} extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Define Lambda execution role with necessary permissions
    const lambdaExecutionRole = new iam.Role(this, 'LambdaExecutionRole', {
      assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),
      ],
    });

    // Add additional permissions
    lambdaExecutionRole.addToPolicy(
      new iam.PolicyStatement({
        actions: [
          'route53:*',
          's3:*',
          'ses:*',
          'sqs:*',
          'dynamodb:*',
          'apigateway:*',
          'kms:Decrypt',
          'cloudformation:*',
          'secretsmanager:GetSecretValue',
          'ssm:GetParameters',
          'ssm:GetParameter',
          'lambda:invokeFunction',
          'acm:ListCertificates',
          'cloudfront:UpdateDistribution',
        ],
        resources: ['*'],
      })
    );

    // Configuration for resources
    const queueConfig: QueueConfig = {
      enabled: {{queueEnabled}},
      names: {{queueNames}},
      batchSize: {{queueBatchSize}}
    };

    const dynamoConfig: DynamoDBConfig = {
      cacheEnabled: {{cacheEnabled}},
      cacheName: '{{cacheName}}',
      sessionEnabled: {{sessionEnabled}},
      sessionName: '{{sessionName}}'
    };

    const assetConfig: AssetConfig = {
      enabled: {{assetEnabled}},
      bucketName: '{{assetBucket}}',
      prefix: '{{assetPrefix}}'
    };

    const domainConfig: DomainConfig = {
      enabled: {{domainEnabled}},
      name: '{{domainName}}',
      certificateArn: '{{certificateArn}}',
      hostedZoneId: '{{hostedZoneId}}',
      hostedZoneName: '{{hostedZoneName}}'
    };

    // Create resources based on configuration
    const resources: Record<string, any> = {};

    // Create SQS Queues if configured
    const queueMap: Record<string, sqs.Queue> = {};
    const queueFailedMap: Record<string, sqs.Queue> = {};

    if (queueConfig.enabled) {
      for (const queueName of queueConfig.names) {
        // Create the main queue
        const queue = new sqs.Queue(this, `${this.pascalCase(queueName)}Queue`, {
          queueName: queueName,
          visibilityTimeout: cdk.Duration.seconds(parseInt('{{timeout}}')),
        });

        // Create the failed queue
        const failedQueue = new sqs.Queue(this, `${this.pascalCase(queueName)}FailedQueue`, {
          queueName: `${queueName}_failed`,
          visibilityTimeout: cdk.Duration.seconds(parseInt('{{timeout}}')),
          retentionPeriod: cdk.Duration.days(7),
        });

        // Configure DLQ redrive policy
        const cfnQueue = queue.node.defaultChild as sqs.CfnQueue;
        cfnQueue.redrivePolicy = {
          maxReceiveCount: 3,
          deadLetterTargetArn: failedQueue.queueArn,
        };

        queueMap[queueName] = queue;
        queueFailedMap[queueName] = failedQueue;
      }
    }

    // Create DynamoDB Tables if needed
    let cacheTable: dynamodb.Table | undefined;
    if (dynamoConfig.cacheEnabled) {
      cacheTable = new dynamodb.Table(this, 'CacheTable', {
        tableName: dynamoConfig.cacheName,
        partitionKey: {
          name: 'key',
          type: dynamodb.AttributeType.STRING,
        },
        billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
        removalPolicy: cdk.RemovalPolicy.RETAIN,
      });
    }

    let sessionTable: dynamodb.Table | undefined;
    if (dynamoConfig.sessionEnabled) {
      sessionTable = new dynamodb.Table(this, 'SessionsTable', {
        tableName: dynamoConfig.sessionName,
        partitionKey: {
          name: 'id',
          type: dynamodb.AttributeType.STRING,
        },
        billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
        removalPolicy: cdk.RemovalPolicy.RETAIN,
      });
    }

    // Create Assets Bucket if needed
    let assetsBucket: s3.Bucket | undefined;
    if (assetConfig.enabled) {
      assetsBucket = new s3.Bucket(this, 'AssetsBucket', {
        bucketName: assetConfig.bucketName,
        publicReadAccess: true,
        cors: [
          {
            allowedMethods: [
              s3.HttpMethods.GET,
              s3.HttpMethods.HEAD,
            ],
            allowedOrigins: ['*'],
            allowedHeaders: ['*'],
          },
        ],
      });
    }

    // Create Lambda functions

    // Web Function
    const webFunction = new lambda.Function(this, 'WebFunction', {
      functionName: '{{name}}-{{stage}}-web',
      runtime: this.getRuntimeFromString('{{runtime}}'),
      memorySize: parseInt('{{memory}}'),
      timeout: cdk.Duration.seconds(parseInt('{{timeout}}')),
      handler: 'vaporHandler.handle',
      code: lambda.Code.fromAsset('app.zip'),
      role: lambdaExecutionRole,
      environment: {{environment}},
    });

    // Create API Gateway
    const api = new apigateway.LambdaRestApi(this, 'WebApi', {
      handler: webFunction,
      proxy: true,
      deployOptions: {
        stageName: '{{stage}}',
      },
    });

    // Create CloudWatch Event Rule for warming
    const warmerRule = new events.Rule(this, 'WarmerRule', {
      schedule: events.Schedule.rate(cdk.Duration.minutes(5)),
    });

    warmerRule.addTarget(new targets.LambdaFunction(webFunction, {
      event: events.RuleTargetInput.fromObject({
        vaporWarmer: true,
        concurrency: {{warmerConcurrency}},
        functionAlias: '{{stage}}',
        functionName: webFunction.functionArn,
      }),
    }));

    // Queue Function - conditionally created
    let queueFunction: lambda.Function | undefined;
    if (queueConfig.enabled) {
      queueFunction = new lambda.Function(this, 'QueueFunction', {
        functionName: '{{name}}-{{stage}}-queue',
        runtime: this.getRuntimeFromString('{{runtime}}'),
        memorySize: parseInt('{{queueMemory}}' || '{{memory}}'),
        timeout: cdk.Duration.seconds(parseInt('{{queueTimeout}}' || '{{timeout}}')),
        handler: 'vaporHandler.handle',
        code: lambda.Code.fromAsset('app.zip'),
        role: lambdaExecutionRole,
        environment: {
          ...{{environment}},
          APP_RUNNING_IN_CONSOLE: 'true',
        },
      });

      // Add SQS event sources to Queue function
      for (const queueName in queueMap) {
        const queue = queueMap[queueName];
        new lambda.EventSourceMapping(this, `${this.pascalCase(queueName)}EventSource`, {
          target: queueFunction,
          eventSourceArn: queue.queueArn,
          batchSize: queueConfig.batchSize,
        });
      }
    }

    // Schedule Function - conditionally created
    let scheduleFunction: lambda.Function | undefined;
    if ({{schedulerEnabled}}) {
      scheduleFunction = new lambda.Function(this, 'ScheduleFunction', {
        functionName: '{{name}}-{{stage}}-schedule',
        runtime: this.getRuntimeFromString('{{runtime}}'),
        memorySize: parseInt('{{scheduleMemory}}' || '{{memory}}'),
        timeout: cdk.Duration.seconds(parseInt('{{scheduleTimeout}}' || '{{timeout}}')),
        handler: 'vaporHandler.handle',
        code: lambda.Code.fromAsset('app.zip'),
        role: lambdaExecutionRole,
        environment: {
          ...{{environment}},
          APP_RUNNING_IN_CONSOLE: 'true',
        },
      });

      // Create CloudWatch Event Rule for schedule
      const scheduleRule = new events.Rule(this, 'ScheduleRule', {
        schedule: events.Schedule.rate(cdk.Duration.minutes(1)),
      });

      scheduleRule.addTarget(new targets.LambdaFunction(scheduleFunction, {
        event: events.RuleTargetInput.fromObject({
          cli: 'schedule:run',
        }),
      });
    }

    // Add custom domain if configured
    if (domainConfig.enabled) {
      // Get or create Certificate
      let certificate: acm.ICertificate;

      if (domainConfig.certificateArn) {
        certificate = acm.Certificate.fromCertificateArn(
          this, 'Certificate', domainConfig.certificateArn
        );
      } else {
        // For this to work, you must have a hosted zone set up
        const hostedZone = route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {
          hostedZoneId: domainConfig.hostedZoneId!,
          zoneName: domainConfig.hostedZoneName!,
        });

        certificate = new acm.DnsValidatedCertificate(this, 'Certificate', {
          domainName: domainConfig.name,
          hostedZone,
          region: 'us-east-1', // Must be us-east-1 for CloudFront
        });
      }

      // Create custom domain for API Gateway
      const domain = api.addDomainName('CustomDomain', {
        domainName: domainConfig.name,
        certificate,
      });

      // Create Route53 record
      if (domainConfig.hostedZoneId && domainConfig.hostedZoneName) {
        const hostedZone = route53.HostedZone.fromHostedZoneAttributes(this, 'ApiHostedZone', {
          hostedZoneId: domainConfig.hostedZoneId,
          zoneName: domainConfig.hostedZoneName,
        });

        new route53.ARecord(this, 'ApiAliasRecord', {
          zone: hostedZone,
          recordName: domainConfig.name,
          target: route53.RecordTarget.fromAlias(
            new route53Targets.ApiGatewayDomain(domain)
          ),
        });
      }
    }

    // Outputs
    new cdk.CfnOutput(this, 'ApiEndpoint', {
      value: api.url,
    });

    new cdk.CfnOutput(this, 'WebFunctionArn', {
      value: webFunction.functionArn,
    });

    if (queueFunction) {
      new cdk.CfnOutput(this, 'QueueFunctionArn', {
        value: queueFunction.functionArn,
      });
    }

    if (scheduleFunction) {
      new cdk.CfnOutput(this, 'ScheduleFunctionArn', {
        value: scheduleFunction.functionArn,
      });
    }
  }

  private getRuntimeFromString(runtime: string): lambda.Runtime {
    switch (runtime) {
      case 'php-8.2':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-8.1':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-8.0':
        return lambda.Runtime.PROVIDED_AL2;
      case 'php-7.4':
        return lambda.Runtime.PROVIDED_AL2;
      case 'docker':
      case 'docker-arm':
        return lambda.Runtime.FROM_IMAGE;
      default:
        return lambda.Runtime.PROVIDED_AL2;
    }
  }

  private pascalCase(str: string): string {
    return str
      .split('_')
      .map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase())
      .join('');
  }
}
