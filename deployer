#!/usr/bin/env php
<?php

use Diviky\Serverless\Commands;
use Dotenv\Dotenv;
use Dotenv\Environment\Adapter\EnvConstAdapter as V3EnvConstAdapter;
use Dotenv\Environment\Adapter\ServerConstAdapter as V3ServerConstAdapter;
use Dotenv\Environment\DotenvFactory;
use Dotenv\Repository\Adapter\EnvConstAdapter as V4orV5EnvConstAdapter;
use Dotenv\Repository\Adapter\ServerConstAdapter as V4orV5ServerConstAdapter;
use Dotenv\Repository\RepositoryBuilder;
use Illuminate\Container\Container;
use Laravel\VaporCli\Application;

$dir = __DIR__ . '/';

if (file_exists($dir . '/autoload.php')) {
    $dir = __DIR__ . '/../vendor';
}

if (file_exists($dir . '/../autoload.php')) {
    $dir = __DIR__ . '/../';
}

if (file_exists($dir . '/../../autoload.php')) {
    $dir = __DIR__ . '/../../';
}

if (file_exists($dir . '/vendor/autoload.php')) {
    $dir = __DIR__ . '/vendor';
}

if (!file_exists($dir . '/autoload.php')) {
    echo 'Autoload not found.';

    exit(1);
}

require $dir . '/autoload.php';

/**
 * Load the environment variables.
 */
(function () {
    if (class_exists(RepositoryBuilder::class)) {
        $adapters = [
            V4orV5EnvConstAdapter::class,
            V4orV5ServerConstAdapter::class,
        ];

        if (method_exists(RepositoryBuilder::class, 'addReader')) { // V5
            $repository = RepositoryBuilder::createWithNoAdapters();

            foreach ($adapters as $adapter) {
                $repository = $repository
                    ->addReader($adapter)
                    ->addWriter($adapter);
            }
        } else { // V4
            $adapters = array_map(function ($adapterClass) {
                return new $adapterClass();
            }, $adapters);

            $repository = RepositoryBuilder::create()
                ->withReaders($adapters)
                ->withWriters($adapters);
        }

        Dotenv::create(
            $repository->immutable()->make(),
            __DIR__
        )->safeLoad();
    } else { // V3
        Dotenv::create(__DIR__, null, new DotenvFactory([
            new V3EnvConstAdapter(), new V3ServerConstAdapter(),
        ]))->safeLoad();
    }
})();

// Create the container instance.
Container::setInstance($container = new Container());

/**
 * Start the console application.
 */
$app = new Application('Laravel Vapor', '1.22.1');

// Projects...
$app->add(new Commands\InitCommand());
// Deployments...
$app->add(new Commands\BuildCommand());
$app->add(new Commands\DeployCommand());
$app->add(new Commands\GenerateCommand());
$app->add(new Commands\PushCommand());

$app->run();
